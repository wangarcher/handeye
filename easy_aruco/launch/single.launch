<launch>

    <arg name="use_charuco" default="false"/>

    <!-- start the Kinect -->
    <arg name="rgb_rect" default="1" />
    <arg name="depth_rect" default="1" />
    <arg name="ir_rect" default="1" />
    <arg name="point_cloud" default="1" />
    <arg name="rgb_point_cloud" default="1" />

    <!-- Start the K4A sensor driver -->
    <group ns="k4a" >
        <include file="$(find azure_kinect_ros_driver)/launch/driver.launch" >
            <arg name="overwrite_robot_description" value="false" />
        </include>

        <!-- Spawn a nodelet manager -->
        <node pkg="nodelet" type="nodelet" name="manager" args="manager" output="screen">
            <param name="num_worker_threads" value="16" />
        </node>

        <!-- Spawn an image_proc/rectify nodelet to rectify the RGB image -->
        <node if="$(arg rgb_rect)"
              pkg="nodelet" type="nodelet" name="rectify_rgb"
              args="load image_proc/rectify manager --no-bond"
              respawn="true">
            <remap from="image_mono"  to="rgb/image_raw" />
            <remap from="image_rect"  to="rgb/image_rect_color" />
        </node>

        <!-- Spawn an image_proc/rectify nodelet to rectify the depth image -->
        <node if="$(arg depth_rect)"
              pkg="nodelet" type="nodelet" name="rectify_depth"
              args="load image_proc/rectify manager --no-bond"
              respawn="true">
            <remap from="image_mono"  to="depth/image_raw" />
            <remap from="image_rect"  to="depth/image_rect" />

            <param name="interpolation" value="0" />
        </node>

        <!-- Spawn an image_proc/rectify nodelet to rectify the IR image -->
        <node if="$(arg ir_rect)"
              pkg="nodelet" type="nodelet" name="rectify_ir"
              args="load image_proc/rectify manager --no-bond"
              respawn="true">
            <remap from="image_mono"  to="ir/image_raw" />
            <remap from="image_rect"  to="ir/image_rect" />
        </node>

        <group if="$(arg point_cloud)">
            <!-- Spawn a depth_image_proc/point_cloud_xyz nodelet to convert the
                depth image into a point cloud -->
            <node unless="$(arg rgb_point_cloud)"
                  pkg="nodelet" type="nodelet" name="point_cloud_xyz"
                  args="load depth_image_proc/point_cloud_xyz manager --no-bond"
                  respawn="true">
                <remap from="image_rect"  to="depth/image_rect" />
            </node>

            <group if="$(arg rgb_point_cloud)">
                <!-- Spawn a depth_image_proc/register nodelet to transform the
                    depth image into the color camera co-ordinate space -->
                <node pkg="nodelet" type="nodelet" name="depth_register"
                      args="load depth_image_proc/register manager --no-bond"
                      respawn="true">
                </node>

                <!-- Spawn a depth_image_proc/point_cloud_xyzrgb nodelet to convert the
                    depth_registered and color images image into a colorized point cloud -->
                <node pkg="nodelet" type="nodelet" name="point_cloud_xyzrgb"
                      args="load depth_image_proc/point_cloud_xyzrgb manager --no-bond"
                      respawn="true">
                </node>
            </group>
        </group>

    </group>

     <!-- start easy_aruco to track the example board -->
    <include unless="$(arg use_charuco)" file="$(find easy_aruco)/launch/track_aruco_marker.launch">
        <arg name="camera_namespace" value="/k4a/rgb"/>
        <arg name="dictionary" value="DICT_6X6_250"/>
        <arg name="marker_size" value="0.04"/>
        <arg name="reference_frame" value="camera_base"/>
        <arg name="camera_frame" value="rgb_camera_link"/>
    </include>
</launch>